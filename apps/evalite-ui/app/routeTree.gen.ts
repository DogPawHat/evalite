/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SplatImport } from './routes/$'
import { Route as EvalNameImport } from './routes/eval.$name'
import { Route as EvalNameResultResultIndexImport } from './routes/eval.$name.result.$resultIndex'

// Create/Update Routes

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const EvalNameRoute = EvalNameImport.update({
  id: '/eval/$name',
  path: '/eval/$name',
  getParentRoute: () => rootRoute,
} as any)

const EvalNameResultResultIndexRoute = EvalNameResultResultIndexImport.update({
  id: '/result/$resultIndex',
  path: '/result/$resultIndex',
  getParentRoute: () => EvalNameRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/eval/$name': {
      id: '/eval/$name'
      path: '/eval/$name'
      fullPath: '/eval/$name'
      preLoaderRoute: typeof EvalNameImport
      parentRoute: typeof rootRoute
    }
    '/eval/$name/result/$resultIndex': {
      id: '/eval/$name/result/$resultIndex'
      path: '/result/$resultIndex'
      fullPath: '/eval/$name/result/$resultIndex'
      preLoaderRoute: typeof EvalNameResultResultIndexImport
      parentRoute: typeof EvalNameImport
    }
  }
}

// Create and export the route tree

interface EvalNameRouteChildren {
  EvalNameResultResultIndexRoute: typeof EvalNameResultResultIndexRoute
}

const EvalNameRouteChildren: EvalNameRouteChildren = {
  EvalNameResultResultIndexRoute: EvalNameResultResultIndexRoute,
}

const EvalNameRouteWithChildren = EvalNameRoute._addFileChildren(
  EvalNameRouteChildren,
)

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute
  '/eval/$name': typeof EvalNameRouteWithChildren
  '/eval/$name/result/$resultIndex': typeof EvalNameResultResultIndexRoute
}

export interface FileRoutesByTo {
  '/$': typeof SplatRoute
  '/eval/$name': typeof EvalNameRouteWithChildren
  '/eval/$name/result/$resultIndex': typeof EvalNameResultResultIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$': typeof SplatRoute
  '/eval/$name': typeof EvalNameRouteWithChildren
  '/eval/$name/result/$resultIndex': typeof EvalNameResultResultIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$' | '/eval/$name' | '/eval/$name/result/$resultIndex'
  fileRoutesByTo: FileRoutesByTo
  to: '/$' | '/eval/$name' | '/eval/$name/result/$resultIndex'
  id: '__root__' | '/$' | '/eval/$name' | '/eval/$name/result/$resultIndex'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute
  EvalNameRoute: typeof EvalNameRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  EvalNameRoute: EvalNameRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$",
        "/eval/$name"
      ]
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/eval/$name": {
      "filePath": "eval.$name.tsx",
      "children": [
        "/eval/$name/result/$resultIndex"
      ]
    },
    "/eval/$name/result/$resultIndex": {
      "filePath": "eval.$name.result.$resultIndex.tsx",
      "parent": "/eval/$name"
    }
  }
}
ROUTE_MANIFEST_END */
